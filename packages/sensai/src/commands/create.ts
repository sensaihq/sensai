import { mkdir, readFile, writeFile } from "node:fs/promises";
import { dirname, join } from "node:path";
import { execSync } from "node:child_process";
import { EXTERNAL_AGENT } from "@/src/constants";

/**
 * Scaffold a new project.
 * An optional prompt can be provided to generate
 */

export type CreateCommandOptions = {
  prompt: string;
  agent: EXTERNAL_AGENT;
};

export default async (options: CreateCommandOptions) => {
  const { prompt, agent } = options;
  if (!prompt) {
    throw new Error("A prompt is required to create a project.");
  }

  // project generated by agent
  try {
    switch (agent) {
      case EXTERNAL_AGENT.CLAUDE:
        await createClaudeProject(prompt);
        break;
    }
  } catch (error) {
    console.log(error);
    throw error;
  }
};

/**
 * Create instructions for `claude-code` to scaffold a project base
 * on the provided prompt.
 */

const createClaudeProject = async (prompt: string) => {
  const root = process.cwd();
  const instructions = await readFile(
    join(__dirname, "../../../llms.txt"),
    "utf-8"
  );
  await scaffold(
    join(root, ".claude/commands/sensai.md"),
    `You are a very strong software engineer with expert knowledge of the framework Sensai. You will be asked to generate code managed by Sensai.\n\n ${instructions}`
  );
  // will throw error if claude code is not installed
  run(`claude "/project:sensai ${prompt}"`);
};

/**
 * Execute a command in the current working directory and return the output.
 */

const run = (command: string) => {
  execSync(command, {
    cwd: process.cwd(),
    stdio: "inherit",
    encoding: "utf-8",
  });
};

/**
 * Simple util to create a file with the given content and recursively create
 * the directories leading to the file.
 */

const scaffold = async (filePath: string, content: string) => {
  await mkdir(dirname(filePath), { recursive: true });
  await writeFile(filePath, content, "utf-8");
};
