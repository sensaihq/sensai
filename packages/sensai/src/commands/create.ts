import { mkdir, readFile } from "node:fs/promises";
import { dirname, join } from "node:path";
import { execSync } from "node:child_process";
import { EXTERNAL_AGENT } from "@/src/constants";
import { write } from "@/src/utils/fs";
import pkg from "#/package.json";

/**
 * Scaffold a new project.
 * An optional prompt can be provided to generate
 */

export type CreateCommandOptions = {
  prompt: string;
  agent: EXTERNAL_AGENT;
};

export default async (options: CreateCommandOptions) => {
  const { prompt, agent } = options;
  if (!prompt) {
    throw new Error("A prompt is required to create a project.");
  }

  // project generated by agent
  try {
    switch (agent) {
      case EXTERNAL_AGENT.CLAUDE:
        await createClaudeProject(prompt);
        break;
    }
  } catch (error) {
    console.log(error);
  }
};

/**
 * Create instructions for `claude-code` to scaffold a project base
 * on the provided prompt.
 */

const createClaudeProject = async (prompt: string) => {
  const root = process.cwd();
  const instructions = await readFile(
    join(__dirname, "../../llms.txt"),
    "utf-8"
  );
  await scaffold(
    join(root, ".claude/commands/sensai.md"),
    `You are a very strong software engineer with expert knowledge of the framework Sensai. You will be asked to generate code managed by Sensai.\n\n ${instructions}`
  );
  // will throw error if claude code is not installed
  await run(`claude -p "/project:sensai ${prompt}"`);
};

/**
 * Execute a command in the current working directory and return the output.
 */

const run = (command: string): string => {
  const output = execSync(command, {
    cwd: process.cwd(),
    encoding: "utf-8",
    stdio: ["pipe", "pipe", "pipe"],
  });
  return output.trim();
};

/**
 * Create a basic static project with a default prompt.
 */

export const createStaticProject = async () => {
  const root = process.cwd();
  // static project
  await Promise.all([
    scaffold(
      join(root, "package.json"),
      JSON.stringify(
        {
          scripts: {
            dev: "sensai dev",
            build: "sensai build",
            start: "sensai start",
          },
          dependencies: {
            sensai: `^${pkg.version}`,
          },
        },
        null,
        2
      )
    ),
    scaffold(
      join(root, "/api/prompt.md"),
      `What is the weather like in #{city}?`
    ),
    scaffold(
      join(root, "/api/tool.weather.ts"),
      `export default guard(
  async (args) => {
    return {
      temperature: 78,
      condition: "Aways sunny",
      location: args.city,
    };
  },
  {
    description: "Get the weather information for a given city",
    input: {
      type: "object",
      properties: {
        location: { type: "string", description: "City name" },
      },
      required: ["location"],
    },
  }
);
`
    ),
  ]);
};

/**
 * Simple util to create a file with the given content and recursively create
 * the directories leading to the file.
 */

const scaffold = async (filePath: string, content: string) => {
  await mkdir(dirname(filePath), { recursive: true });
  write(filePath, content);
};
